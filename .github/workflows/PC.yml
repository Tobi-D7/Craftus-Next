name: Craftus-Next

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
#  build:
#    runs-on: ubuntu-latest
#    outputs:
#      commit_tag: ${{ steps.build.outputs.commit_tag }}
#      commit_hash: ${{ steps.build.outputs.commit_hash }}
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: set up
#        run: |
#          sudo apt update
#          sudo apt install g++ make gcc cmake
#      - name: build
#        id: build
#        run: |
#          #g++ nightlytool.cpp -o nightlytool
#          mkdir -p ~/artifacts
#          #cp nightlytool ~/artifacts
#          echo ::set-output name=commit_tag::$(git describe --abbrev=0 --tags)
#          echo ::set-output name=commit_hash::$(git log --format=%h -1)
#      - name: upload artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          path: ~/artifacts/*
#          name: ubuntu
#  windows:
#    runs-on: windows-latest
#    steps:
#      - name: Check
#        uses: actions/checkout@v2
#        with:
#          submodules: recursive
#      - name: SetUp
#        uses: seanmiddleditch/gha-setup-vsdevenv@master
#      - name: Build on Windows
#        shell: bash
#        run: |
#          cd Platforms/Windows
#          mkdir -p build
#          cd build
#          cmake ..
#          cmake --build .#
#
#      - name: "Publish build to GH Actions"
#        uses: actions/upload-artifact@v2
#        with:
#          path: Platforms/Windows/build/Debug/Craftus-Next.exe
#          name: "windows"#

  windows-mingw:
    runs-on: windows-latest
    steps:
      - name: Check
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install MinGW
        uses: egor-tensin/setup-mingw@v2
      - name: Build on Windows
        outputs:
        commit_tag: ${{ steps.build.outputs.commit_tag }}
        commit_hash: ${{ steps.build.outputs.commit_hash }}
        author_name: ${{ steps.build.outputs.author_name }}
        committer_name: ${{ steps.build.outputs.committer_name }}
        commit_subject: ${{ steps.build.outputs.commit_subject }}
        commit_message: ${{ steps.build.outputs.commit_message }}
        shell: bash
        run: |
          cd Platforms/Windows
          mkdir -p build
          cd build
          cmake .. -G "MinGW Makefiles"
          cmake --build .
          echo ::set-output name=commit_tag::$(git describe --abbrev=0 --tags)
          echo ::set-output name=commit_hash::$(git log --format=%h -1)
          # Webhook info
          echo ::set-output name=author_name::$(git log -1 "$GITHUB_SHA" --pretty="%aN")
          echo ::set-output name=committer_name::$(git log -1 "$GITHUB_SHA" --pretty="%cN")
          echo ::set-output name=commit_subject::$(git log -1 "$GITHUB_SHA" --pretty="%s")
          echo ::set-output name=commit_message::$(git log -1 "$GITHUB_SHA" --pretty="%b")

      - name: "Publish build to GH Actions"
        uses: actions/upload-artifact@v2
        with:
          path: Platforms/Windows/build/Craftus-Next.exe
          name: "windows-mingw"

  publish_build:
    runs-on: ubuntu-latest
    name: Publish build to Tobi-D7/Craftus-Nightlys
    if: ${{ success() && !startsWith(github.ref, 'refs/pull') }}
    needs: build
    env:
      COMMIT_TAG: ${{ needs.build.outputs.commit_tag }}
      COMMIT_HASH: ${{ needs.build.outputs.commit_hash }}
      AUTHOR_NAME: ${{ needs.build.outputs.author_name }}
      COMMIT_MESSAGE: ${{ needs.build.outputs.commit_message }}
    outputs:
      current_date: ${{ steps.commit.outputs.current_date }}
    steps:
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install qrencode -y
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - name: Upload to ${{ github.repository }} release
        if: ${{ startsWith(github.ref, 'refs/tags') }}
        run: |
          ID=$(jq --raw-output '.release.id' $GITHUB_EVENT_PATH)
          for file in ${{ github.workspace }}/build/*; do
            AUTH_HEADER="Authorization: token ${{ secrets.TOKEN }}"
            CONTENT_LENGTH="Content-Length: $(stat -c%s $file)"
            CONTENT_TYPE="Content-Type: application/7z-x-compressed"
            UPLOAD_URL="https://uploads.github.com/repos/${{ github.repository }}/releases/$ID/assets?name=$(basename $file)"
            curl -XPOST -H "$AUTH_HEADER" -H "$CONTENT_LENGTH" -H "$CONTENT_TYPE" --upload-file "$file" "$UPLOAD_URL"
          done
      - name: Commit and push to Tobi-D7/Craftus-Nightlys
        id: commit
        run: |
          CURRENT_DATE=$(date +"%Y%m%d-%H%M%S")
          echo ::set-output name=current_date::$CURRENT_DATE
          git config --global user.email "tobid7@outlook.de"
          git config --global user.name "Tobi-D7"
          git clone --depth 1 https://${{ secrets.TOKEN }}@github.com/Tobi-D7/Craftus-Nightlys.git
          echo hi
          cd Craftus-Nightlys
          #sudo chmod +x nightlytool
          echo running
          #./nightlytool management/Craftus-Next.ini Craftus-Next Tobi-D7 Craftus-Nightlys v$CURRENT_DATE $COMMIT_HASH "\\$COMMIT_SUBJECT\\$COMMIT_MESSAGE\\\\" 0 "$AUTHOR_NAME"
          echo creating dirs
          ls -R
          mkdir -p builds/Craftus-Next/
          cd builds/Craftus-Next/
          cp ${{ github.workspace }}/build/* .
          git stage .
          git commit -m "Craftus-Next | $COMMIT_HASH"
          git tag v$CURRENT_DATE
          git push origin master v$CURRENT_DATE
      - name: Release to idk
        run: |
          ls ${{ github.workspace }}/build
          AUTH_HEADER="Authorization: token ${{ secrets.TOKEN }}"
          CONTENT_TYPE="Content-Type: application/json"
          API_URL="https://api.github.com/repos/Tobi-D7/Craftus-Nightlys/releases"
          RELEASE_INFO="{\"tag_name\": \"v${{ steps.commit.outputs.current_date }}\", \"name\": \"Craftus-Next | $COMMIT_HASH\", \"body\": \"$AUTHOR_NAME - $COMMIT_SUBJECT\\n\\n$COMMIT_MESSAGE\", \"prerelease\": true}"
          RESPONSE=$(curl -XPOST -H "$AUTH_HEADER" -H "$CONTENT_TYPE" "$API_URL" -d "$RELEASE_INFO")
          ID=$(echo $RESPONSE | jq --raw-output '.id')
          for file in ${{ github.workspace }}/build/*; do
            AUTH_HEADER="Authorization: token ${{ secrets.TOKEN }}"
            CONTENT_LENGTH="Content-Length: $(stat -c%s $file)"
            CONTENT_TYPE="Content-Type: application/7z-x-compressed"
            UPLOAD_URL="https://uploads.github.com/repos/Tobi-D7/Craftus-Nightlys/releases/$ID/assets?name=$(basename $file)"
            curl -XPOST -H "$AUTH_HEADER" -H "$CONTENT_LENGTH" -H "$CONTENT_TYPE" --upload-file "$file" "$UPLOAD_URL"
          done
